Garage Sensor System Program Development

Derive ID From the Unique Identifier
Obtained a library called ArduinoUniqueID that can retrieve a unique identifier from the SAMD21
Have used the first byte to derive simpler ID's from it - 1, 2, 3, 4, 5, 6, 7 on the 7 Adafruit Feather M0's that we have.


Loop - splits up functions based on whether the ID is 1 or other.
ID1 is the GSM.
Any other ID is the GSU
Currently the GSM functionality is to listen constantly and reply when it receives a message. Sleep mode not implemented yet.

The GSU functionality currently goes to sleep for 5 seconds via the built in RTC, wakes up, 
sends a message over LoRa, waits for a reply then goes back to sleep. A quick 2x blink of the built in LED
indicates that a reply was received.

Everything makes extensive use of delay() currently since the LoRa radio needs to wait for things.
Whether this can and needs to be removed remains to be seen. 


DS3231's
Have two DS3231s that Zane provided while we wait for CR1220 batteries for the ones we ordered.
Have got the 2 clocks almost synchronized, they are 1 second apart currently. 
This might be good enough depending on how long they stay in sync.


/*************************************************************************************************/
To Do List
Anything High priority has to be implemented. Medium needs to be as well. 
Low and below if there's time.

Integrate the DS3231 into the GSS.ino program and use that to wake up the Feather periodically
instead of the RTC via an interrupt.
Priority: High
Complexity: Low
Units: GSU and GSM

Have the GSM go to sleep and wake up at specific times to listen before going back to sleep.
Must have the GSU and GSM in sync to do this properly. The worst case scenario for this is
we don't have the GSM go to sleep at all. Not ideal since power usage on the GSM will be huge.
Priority: Medium
Complexity: High
Units: GSU and GSM

Have the GSM send the received messages from the GSUs and its own generated ones from the
sensors to the GSG. This will be done message at a time: the GSM receives a message from the GSU,
it then immediately forwards it on to the GSG with no waiting.
Priority: High
Complexity: Low
Units: GSM

Improve the sending of messages for the GSM by storing the received messages in a buffer until
it reaches a size of approx 200 bytes before sending it in one go. This will save power by
reducing the number of transmissions but we could live without it if I can't get it to work.
Priority: Low
Complexity: High
Units: GSM

Implement addressing capabilities on the units so that only the GSM receives the messages.
As it is, anyone can receive the messages including the GSUs which we don't want currently.
(This wouldn't be the case in the full mesh implementation). We want GSUs to only respond to messages
from the GSM - ID1. The GSUs need to ignore any messages not sent from other GSUs.
Priority: High
Complexity: Medium
Units: GSU and GSM

Implement encryption so that others cannot interfere with messages. We don't have the built in encryption
module on the Feathers so this will need to use a library of some kind. We can live without it if it
isn't done in time.
Priority: Low
Complexity: Very High
Units: GSU, GSM and GSG

Have the GSUs communicate with one another for network statistics purposes. Since we don't need to do
a proper mesh network this is only if I get everything else done.
Priority: Very Low
Complexity: High
Units: GSU and GSM

When the Gateway arrives it will need to be configured to receive messages from the GSM only.
It then needs to forward it to the server.
Don't know what to do with this yet since it hasn't arrived and we don't have other stuff set up.
Might use a Feather to simulate the gateway in the meantime.
Priority: Very High
Complexity: High
Units: GSG
